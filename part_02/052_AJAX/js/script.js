'use strict';

// AJAX - Async JavaScript and XML
// Нужен для асинхронных запросов без перезагрузки страницы.

// для начала рассмотрим неактуальный на данное время вариант, но он может встречаться
const inputRub = document.querySelector('#rub'),
      inputUSD = document.querySelector('#usd');


// есть обработчки для инпутов.
// change возникет, когда инпут уходит из фокуса
// input - возникает когда что-то вводится либо удаляется в инпут
inputRub.addEventListener('input', () => {

    // конструктор создающий новый объект XML запросов
    const request = new XMLHttpRequest();

    // методы из объекта XMLHttpRequest
    // open () - он не открывает соединение между FE и BE, а лишь собирает
    // настройки, которые в будущем помогут сделать запрос
    // принимает в себя аргументы.
    // 1) Метод запроса. 2) путь к серверу 3) асинхронность
    // AJAX запросы по умолчанию явл. асинхронным вводом.
    // Мы послали запрос на сервер и не знаем сколько времени нам сервер будет отвечать
    // Соответственно, остальной код после запроса должен выполняться
    // После того когда сервер ответит, код который асинхронных уже закончит работу
    // изначально он третьим аргументом стоит в True
    // 4) login 5) password. Некоторые запросы могут требовать логин и пароль

    // GET запросы для получения данных
    // POST когда что-то отправляем, постим, публикуем
    // url - формируется относительно index.html
    // остальные аргументы необязательные
    request.open('GET', 'js/current.json');

    // когда отправляем запрос - нужно потом сказать также а что именно мы отправляем
    // для этого существуют HTTP заголовки. Используем заголовок для передачи JSON файлов
    request.setRequestHeader('Content-type', 'application/json; charset=utf-8');

    // теперь когда все приготовления готовы - можно отправить сам запрос
    // метод send() - отличается от метода запроса (GET или POST)
    // принимает body для POST запросов
    request.send();
    // скорость запросов и ответов зависит от сервера и скорости интернета

    // Когда пришел ответ от сервера:
    // status - инфо о статусе запроса (404,403 итд)
    // statusText - текстовое описание от сервера
    // response - важное свойство. Ответ от сервера, здесь лежит ответ от бэка, который нужно использовать на клиенте
    // readyState - текущее состояние запроса

    // на основании этих свойств строится дальнейшее взаимодействие

    // события
    // readystatechange - статус готовности запроса в текущий момент
    // вызывается поэтапно несколько раз
    // load - когда запрос полностью загржуен и мы получили какой-то результат

    // но чаще всего используется событие load, оно проще
    // срабатывает один раз, когда запрос уже полностью готов
    // но это не значит что он завершен успешно
    request.addEventListener('load', () => {


        // 4 = статус DONE - все данные пришли. 200 значит что запрос успешно завершился, OK
        // if (request.readyState === 4 && request.status === 200) - для события readyStatechange
        if (request.status === 200) {
            // в переменную data распарсим JSON с сервера
            const data = JSON.parse(request.response);

            // рассчет курса валют на основе данных из сервра и того что ввел пользователь
            inputUSD.value = (+inputRub.value / data.current.usd).toFixed(2); // с округлением до 2 знаков после точки
        }
        // если что-то сломалось - всегда нужно сказать об этом пользователю
        else {
            inputUSD.value = 'Что-то пошло не так';
        }
    });
});
