// чтобы импортировать нужную фукнцию из другого файла, нужно сделать
// Название может быть любое
const myModule = require('./main'); // расширение можно не ставить, сборщик сам это понимает

// теперь попробуем использовать функцию
// это функция конструктор, поэтому создаем новую переменную и туда кладем модуль
const myModuleInstance = new myModule();

// теперь мы можем смело использовать методы из импортированноо файла
myModuleInstance.hello();
myModuleInstance.goodbye();

// браузер не умеет собиртаь модули самостоятельно!!!
// Ему все равно на экспорты и импорты, он просто выдаст ошибку
// он тупо не знает что такое require()
// Любая модульная система должна быть собрана в один результирующий файл

// для сборки модулей как раз используем webpack
// она может не только собирать скрипты в кучу, но и конфигурировать проект в целом
// обрабатывать стили, картинки, формировать папки и кучу всего

// не путать c Gulp. Gulp - это планироващик задач, при помощи него создаются различные таски
// которые будут выполнятся при различных обстаятельствах. Он не умеет собирать  скрипты, обрабатывать изображения итд
// он лишь подключается в себя какие-то модули и запускает определенные задачи
// когда от него это требуют.

// А вот webpack это сборщик модулей и мы его настраиваем и запускаем его
// чтобы он собирал проект. Они спокойно могут работать вместе
// Например, с помощью Gulp можно запускать WP и это нормальная практика

// установка WP https://webpack.js.org/guides/getting-started/

//Сначала создадим каталог, инициализируем npm, установим webpack локально и
// установим webpack-cli (инструмент, используемый для запуска webpack из командной строки)

// mkdir webpack - demo
// cd webpack - demo
// npm init - y
// npm install webpack webpack - cli--save - dev

// ЕГо также можно поставить и глобально, чтобы из любой папки брать да собирать
// проект.  Но когда работа идет с реальным проектом то лучше всего ставить ЕГо
// локально, чтобы кто-то другой мог пониммать, что используется вебпек.

// у вебпека есть два режима работы
// 1) Это использование стандартных настроек, т.е что задано по умолчанию
// 2) Через конфиг и по этим правилам он уже будет работать

// Когда запускаем без конфига, то уже есть какие-то стандартные настройки
// и нужно от них отталикиваться. см. документацию.
// Главный файл который принимает в себя все импорты должен называться index.js
// и должен находиться строго в папке src. Это главное условие для работы вебпэка без конфига

// npx webpack - Для запуска вебпэка.
// после этого создается папка dist c файлом main.js
//  это оптимизированная модульная структура, которую мы разбирали в прошлом уроке (070)
// отдельные файлы совместились вместе - при чем это каждый отдельный модуль, со своей локальной областью видимости

// в реальных проектах обычно используется конфиг для более гибких настроек сборок
// файл webpack.config.js
