'use strict';

// Событийный цикл (Event loop)

console.log(1);

setTimeout(() => {
    console.log('timeout');
}, 2000);

setTimeout(() => {
    console.log('timeout_4000');
}, 4000);

console.log(2);

// результат вывода: 1 2 tout tout4000 за счет комбинации синхронного и асинхронного кода
// если таймауты с одинаковым таймером, то раньше сработает тот, который был в коде раньше написан

// асинхронные операции
// 1) которые запускаются с течением определенного времени. таймауты и интервалы
// 2) любые запросы на сервер
// 3) все колбеки также являются асинхронными.

// WEB apis хранит колбеки из обработчиков событий, для того чтобы вызвыать в будущем, когда-то ( мы не знаем когда произойдет)
// таймаут тоже туда попадает, она сохраняет также колбек, но его таймер мы знаем
// WEB apis хранилище для асинхронного кода
// из хранилища колбеки попадают в очередь колбеков и если она на первом месте, то выполнится сразу же
// если при ожидании таймаута накликать на кнопку с обработчиком, то каждый клик попадет в очередь и отдалит таймаут
// если у этих кликов также будут таймеры внутри, то они уже будут дожидаться таймер изначальный и потом начнут выполнятся
