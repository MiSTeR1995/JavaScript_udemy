'use strict';
// API - application  programming interface - интерфейс приложения
// это набор данных и возможностей, которые предоставляет какое-то готовое решение
// самый банальный это DOM API (методы позволяющие работать с элем. на стр.)

// Fetch API позволяет общаться с сервром и построенна на промисах
// для тестирование запросов испольуем jsonplaceholder
// внутрь fetch помещаем url на который посылаем запрос
// если больше ничего не указывать, то это будет классически get запрос
// внутри конструкции возвращается именно промис
// у fetch есть несколько методов помимо json() - text() и тд
fetch('https://jsonplaceholder.typicode.com/todos/1') // отсюда вернется промис, который можно обработать при помощи цепочки then
    .then(response => response.json()) // ответ получаем в формате json. response.json() - метод превратит json  в js-Объект. но есть особенность, эта команда возвращает промис, чтобы строить дальше цепочку. А промис потому, что мы не знаем как быстро этот файл превратится в js объект. Если все успешно прошло, то выполняем then
    .then(json => console.log(json));

// для других запросов. POST:
// вторым аргументом помещаем объект с настройками, которые будем задавать
// содержит много различных свойств, но самыми обязательными являются только два
// 1 - метод, 2 - body, тело которое будем отправлять
fetch('https://jsonplaceholder.typicode.com/posts', {
    method: 'POST',
    body: JSON.stringify({name: 'Alex'}), // превращаем сразу в json формат
    // желательно также указывать заголовки для определения контента
    headers: {
        'Content-type': 'application/json'
    }
})
    .then(response => response.json())
    .then(json => console.log(json));
