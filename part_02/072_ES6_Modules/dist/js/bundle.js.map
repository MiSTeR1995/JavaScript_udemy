{"version":3,"sources":["webpack:///./src/js/main.js","webpack:///./src/js/script.js","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///webpack/startup"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA;;AAEA;AACO;;AAEP;;AAEA;AACa;;AAEb;AACA;AACe;AACf;AACA;;AAEA;AACA;;;;;;;;;;;;;;AChBA;AACA;AACA;;AAEA;;AAEA,6CAA6C;AAC7C;AACA,WAAW,SAAS;;AAEpB,kBAAkB,IAAI,OAAO,IAAI;;AAEjC;;AAEA;AACA;AACA;AACA,WAAW,aAAa;;AAExB;AACA,kCAAkC;AAClC,kBAAkB,SAAS,OAAO,SAAS;AAC3C;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,iBAAiB;;AAE5B,WAAW,SAAS;;AAEpB,kBAAkB,IAAI,OAAO,IAAI;AACjC;;AAEA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACqC;AACP;;AAE9B,eAAe,yCAAG,CAAC,OAAO,yCAAG,CAAC;;AAE9B,iDAAK;;AAEL;;;;;;;UCpEA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCrBA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,sF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;UCNA;UACA;UACA;UACA","file":"bundle.js","sourcesContent":["// отсюда будем экспортировать\r\n\r\n// ключевое слово export позволяет экспортировать что-либо\r\nexport let one = 1;\r\n\r\n// второй вариант экспорта - именованный синтаксис\r\n\r\nlet two = 2;\r\nexport {two};\r\n\r\n// экспортируем именно эту функцию по умолчанию\r\n// сущность на дефолтный импорт может быть только одна в файле\r\nexport default function sayHi() {\r\n    console.log('hello');\r\n}\r\n\r\n// самое главное в таких экспортах, чтобы у каждой сущности было свое имя!\r\n// в файле может быть несколько экспортов\r\n","\r\n// МОдульная структура это фишка стандарта ES6\r\n// этот стандарт точно также как синтаксис commonJS позволяет формировать модули\r\n// при помощи специального синтаксиса\r\n\r\n// структура этого стандарта более гибкая\r\n\r\n// импортируем сюда. ключевое слово import {} from './'\r\n// обязательно через фигурые скобки.\r\n// import {one, two} from './main';\r\n\r\n// console.log(`${one} and ${two}`);\r\n\r\n// этот синтаксис также необходимо собирать через сборщик в один рабочий скрипт\r\n\r\n// дополнительные плюшки этого синтаксиса\r\n// 1) когда что-то импортируем в наш проект, то можно переименовать сущность в импорте\r\n// ипсользуется для импорта больших названий\r\n// import {one as first} from './main';\r\n\r\n// 2) импорт всего, что экспортируется в файле из кооторого хотим импортировать\r\n// import * as data from './main'; // data - объект всего, что вытащили из того файла\r\n// console.log(`${data.one} and ${data.two}`);\r\n// data.sayHi();\r\n\r\n// по факту импортируется объект, из которого мы вытаскиваем определенные пермеенные\r\n// был один объект, мы его деструктурировали на отдельные переменные\r\n\r\n// кроме именнованого синтаксиса есть также экспорт по умолчанию.\r\n// он может быть только один в файле\r\n// преимущесвто этого экспорта. Когда нужно импортировать этот файл куда-то\r\n// именно используя дефолтный экспорт. Такая сущность берется не как именнованая\r\n// а напрямую экспортируется.\r\n// Экспорт по умолчанию должен быть только один.\r\n\r\n// По факту дефолтный экспорт это тоже именнованый экспорт и выглядит внутри след образом.\r\n// но так не нужно писать каждый раз\r\n// import {default as sayHi} from './main';\r\n\r\n// import {one, two} from './main';\r\n\r\n// console.log(`${one} and ${two}`);\r\n// import sayHi from './main';\r\n\r\n// sayHi();\r\n\r\n\r\n// интересная фича на странице это аттрибут type module\r\n// применяется к тегу script, чтобы использовать скрипты в качестве модулей.\r\n// см. index.html\r\n\r\n// сначала подключаем экспорты, потом имппорты\r\n// нужно обязательно задать аттрибут модуль\r\n// но стоит помнить, что браузер не собирает модули!\r\n// но он может последовательно подключать эти файлы экспорт импорт\r\n// если таких модулей много, то нужно будет их подключить все последовательно\r\n\r\n// <script type='module' src=\"./js/main.js\"></script>\r\n// <script type='module' src=\"./js/script.js\"></script>\r\n\r\n// нужно правильно прописывать и пути, если вебпек без расширения понимал что это js, то браузер нет\r\nimport { one, two } from './main.js';\r\nimport sayHi from './main.js';\r\n\r\nconsole.log(`${one} and ${two}`);\r\n\r\nsayHi();\r\n\r\n// этой фишкой пользуются редко, но стоит помнить об этом\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module\n__webpack_require__(\"./src/js/script.js\");\n// This entry module used 'exports' so it can't be inlined\n"],"sourceRoot":""}